<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables,39,40" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Order_Number1" elementType="Argument">
            <stringProp name="Argument.name">Order_Number1</stringProp>
            <stringProp name="Argument.value">Perf_Test_Billing_30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Order_Number1" elementType="Argument">
            <stringProp name="Argument.name">Order_Number1</stringProp>
            <stringProp name="Argument.value">Perf_Test_3008_45</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Order_Number" elementType="Argument">
            <stringProp name="Argument.name">Order_Number</stringProp>
            <stringProp name="Argument.value">PT_Amend_1409_4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Perf_Test_Billing_4,PT_Amend_2308_28,</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">access_token</stringProp>
            <stringProp name="Header.value">eyJraWQiOiJHZkVVMlZWMno4NzllM2ZDOEJUOE4wM0dQWEdCVTdXTl9rUE1NTFZJNlNJIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmpzZ2dSV2xNa0NwTHpSZVBDY0Q0c3dpOVdXb3lKRXVMMHlkZTVUZHFqcGMiLCJpc3MiOiJodHRwczovL3JlY3Z1ZS5va3RhLmNvbSIsImF1ZCI6Imh0dHBzOi8vcmVjdnVlLm9rdGEuY29tIiwic3ViIjoiYXV0b21hdGlvbnVzZXJAcmVjdnVlLmNvbSIsImlhdCI6MTYzMTcwMjExNiwiZXhwIjoxNjMxNzA1NzE2LCJjaWQiOiIwb2E4MzlkdHdMOFhvVHZiRjJwNiIsInVpZCI6IjAwdTdudXdvczBKbmlwQ1ZpMnA3Iiwic2NwIjpbIm9wZW5pZCJdfQ.P-aqWakyAH6OcwpP9jvau1zOhOrGgU4KpCKzRHsKJGWQwBvNrAjt5M2BhXR_qOCI_p6HY5fb7KQVUJ9Mw2Dt6A1GyoxRESTnbyvwR6it1mA36QGZ7atYa4o36Yy77M492rXdMHW6NsxxA8chCsFMZqJQqkQzXUKmCq2aVMkD16kw500LB0hrwWc6iKAYqpTecjuNllb4fZfcJeXU9pRiSfJok9ASG_h1Hqk5AWrLeD65hmng6b5GwUplSqNL-NfjERfZFzJ3j4rwD2xig8Nm5H1Sm87iPNbiHqUG1_tpy3Lh_OSH1At3oZSGfAjlzwPkTVcox2G9-gVWx2WOnyJaXg</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group--BillRun" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;orderType&quot;: &quot;Test&quot;,&#xd;
  &quot;orderCategory&quot;: &quot;New&quot;,&#xd;
  &quot;dealNumber&quot;: &quot;Perf123&quot;,&#xd;
  &quot;orderSource&quot;: &quot;CRM&quot;,&#xd;
  &quot;evergreenFlag&quot;: &quot;N&quot;,&#xd;
  &quot;effectiveStartDate&quot;: &quot;2021-01-01&quot;,&#xd;
  &quot;effectiveEndDate&quot;: &quot;2021-06-30&quot;,&#xd;
  &quot;businessUnit&quot;: &quot;US1 Business Unit&quot;,&#xd;
  &quot;currency&quot;: &quot;US Dollar&quot;,&#xd;
  &quot;priceList&quot;: &quot;SG Price List&quot;,&#xd;
  &quot;billToAccountNumber&quot;: &quot;RAR000075-V12&quot;,&#xd;
  &quot;billToSiteNumber&quot;: &quot;RAR000075&quot;,&#xd;
  &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;internalContact&quot;: &quot;&quot;,&#xd;
  &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;invoiceAdj&quot;: &quot;1&quot;,&#xd;
  &quot;invoiceAdjMonths&quot;: &quot;0&quot;,&#xd;
  &quot;billingReviewInd&quot;: &quot;&quot;,&#xd;
  &quot;agencyDiscount&quot;: &quot;0&quot;,&#xd;
  &quot;paymentTerm&quot;: &quot;30 Net&quot;,&#xd;
  &quot;billingBatch&quot;: &quot;BM_001&quot;,&#xd;
  &quot;attribute6V&quot;: &quot;&quot;,&#xd;
  &quot;attribute7V&quot;: &quot;&quot;,&#xd;
  &quot;comments&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2/orders?access_token=309q9k9ol0db8gpvtg66mt4jsvp</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">test.recvue.com/testmajor.recvue.com</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orderId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">C_orderId</stringProp>
            <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">C_orderId_____NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script"> order = vars.get(&quot;orderNumber&quot;);
 FileWriter fstream = new FileWriter(&quot;C://Users//Bhaskar//Desktop//WL_Tomcat//TestData//orderNumber.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script"> order = vars.get(&quot;C_orderId&quot;);
 FileWriter fstream = new FileWriter(&quot;C://Users//Bhaskar//Desktop//WL_Tomcat//TestData//OrderId.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1537214">2000</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LineCreation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;lineNumber&quot;: 1,&#xd;
  &quot;itemName&quot;: &quot;Diesel&quot;,&#xd;
  &quot;businessUnit&quot;:&quot;US1 Business Unit&quot;,&#xd;
  &quot;itemDescription&quot;: &quot;Diesel&quot;,&#xd;
  &quot;uom&quot;: &quot;&quot;,&#xd;
  &quot;quantity&quot;: &quot;10&quot;,&#xd;
  &quot;unitPrice&quot;:&quot;100&quot;,  &#xd;
  &quot;effectiveStartDate&quot;: &quot;2021-01-01&quot;,&#xd;
  &quot;effectiveEndDate&quot;: &quot;2021-06-30&quot;,&#xd;
  &quot;lineType&quot;: &quot;Recurring&quot;,&#xd;
  &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;invoiceAdjMonths&quot;: 2,&#xd;
  &quot;invoiceAdj&quot;: 1,&#xd;
  &quot;billZeroAmount&quot;: 0,&#xd;
  &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;accountingRule&quot;: &quot;Immediate&quot;,&#xd;
  &quot;billingBatch&quot;: &quot;&quot;,&#xd;
  &quot;billToAccountNumber&quot;: &quot;&quot;,&#xd;
  &quot;billToSiteNumber&quot;: &quot;&quot;,&#xd;
  &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;attribute6V&quot;: &quot;&quot;,&#xd;
  &quot;attribute7V&quot;: &quot;&quot;,&#xd;
  &quot;attribute8V&quot;: &quot;&quot;,&#xd;
  &quot;attribute9V&quot;: &quot;&quot;,&#xd;
  &quot;attribute10V&quot;: &quot;&quot;,&#xd;
  &quot;attribute11V&quot;: &quot;&quot;,&#xd;
  &quot;attribute12V&quot;: &quot;&quot;,&#xd;
  &quot;attribute13V&quot;: &quot;&quot;,&#xd;
  &quot;attribute14V&quot;: &quot;&quot;,&#xd;
  &quot;attribute15V&quot;: &quot;&quot;,&#xd;
  &quot;attribute16V&quot;: &quot;&quot;,&#xd;
  &quot;attribute17V&quot;: &quot;&quot;,&#xd;
  &quot;attribute18V&quot;: &quot;&quot;,&#xd;
  &quot;attribute19V&quot;: &quot;&quot;,&#xd;
  &quot;attribute20V&quot;: &quot;&quot;,&#xd;
  &quot;attribute1D&quot;: &quot;&quot;,&#xd;
  &quot;attribute2D&quot;: &quot;&quot;,&#xd;
  &quot;serviceTypeId&quot;: &quot;&quot;,&#xd;
  &quot;jurisdictionId&quot;: &quot;&quot;,&#xd;
  &quot;exemptionCounty&quot;: &quot;&quot;,&#xd;
  &quot;exemptionFederal&quot;: &quot;&quot;,&#xd;
  &quot;exemptionLocal&quot;: &quot;&quot;,&#xd;
  &quot;exemptionsState&quot;: &quot;&quot;,&#xd;
  &quot;sale&quot;: &quot;&quot;,&#xd;
  &quot;taxCode&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute6V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute7V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute8V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute9V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute10V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute11V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute12V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute13V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute14V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute25V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute26V&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2/orderLine?access_token=309q9k9ol0db8gpvtg66mt4jsvp</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LineId" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">C_LineId</stringProp>
            <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">C_LineId_____NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);
 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//Lines.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();   */


order = vars.get(&quot;orderNumber&quot;);
order1 = vars.get(&quot;C_LineId&quot;);
f = new FileOutputStream(&quot;E://DataFiles//LineId.txt&quot;, true);
p = new PrintStream(f);
  this.interpreter.setOut(p);
  print(order + &quot;,&quot; + order1);
  f.close();</stringProp>
            <stringProp name="TestPlan.comments">OrderNumber &amp; Line Id at sametime</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 /*FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineId.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();*/
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">order = vars.get(&quot;orderNumber&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineorderNumber.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1537214">2000</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderActivate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;orderId&quot;:&quot;${C_orderId}&quot;,&#xd;
&quot;orderNumber&quot;: &quot;${Order_Number}&quot;&#xd;
}&#xd;
&#xd;
/*{&#xd;
&quot;orderId&quot;:&quot;11614828&quot;,&#xd;
&quot;orderNumber&quot;: &quot;Perf_Test_Billing_3&quot;&#xd;
}/*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2.0/orders/${C_orderId}/activate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${C_orderId}</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">testmajor</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group--PayRun" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">2000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;orderType&quot;: &quot;LP_Both&quot;,&#xd;
  &quot;orderCategory&quot;: &quot;New&quot;,&#xd;
  &quot;dealNumber&quot;: &quot;Perf123&quot;,&#xd;
  &quot;orderSource&quot;: &quot;CRM&quot;,&#xd;
  &quot;evergreenFlag&quot;: &quot;N&quot;,&#xd;
  &quot;effectiveStartDate&quot;: &quot;2020-01-01&quot;,&#xd;
  &quot;effectiveEndDate&quot;: &quot;2020-12-31&quot;,&#xd;
  &quot;businessUnit&quot;: &quot;US1 Business Unit&quot;,&#xd;
  &quot;currency&quot;: &quot;US Dollar&quot;,&#xd;
  &quot;priceList&quot;: &quot;SG Price List&quot;,&#xd;
  &quot;billToAccountNumber&quot;: &quot;RAR000075-V12&quot;,&#xd;
  &quot;billToSiteNumber&quot;: &quot;RAR000075&quot;,&#xd;
  &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;internalContact&quot;: &quot;&quot;,&#xd;
  &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;invoiceAdj&quot;: &quot;1&quot;,&#xd;
  &quot;invoiceAdjMonths&quot;: &quot;0&quot;,&#xd;
  &quot;billingReviewInd&quot;: &quot;&quot;,&#xd;
  &quot;agencyDiscount&quot;: &quot;0&quot;,&#xd;
  &quot;paymentTerm&quot;: &quot;30 Net&quot;,&#xd;
  &quot;billingBatch&quot;: &quot;BM_001&quot;,&#xd;
  &quot;attribute6V&quot;: &quot;&quot;,&#xd;
  &quot;attribute7V&quot;: &quot;&quot;,&#xd;
  &quot;comments&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2/orders?access_token=309q9k9ol0db8gpvtg66mt4jsvp</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">test.recvue.com/testmajor.recvue.com</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orderId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">C_orderId</stringProp>
            <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">C_orderId_____NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script"> order = vars.get(&quot;orderNumber&quot;);
 FileWriter fstream = new FileWriter(&quot;C://Users//Bhaskar//Desktop//WL_Tomcat//TestData//orderNumber.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script"> order = vars.get(&quot;C_orderId&quot;);
 FileWriter fstream = new FileWriter(&quot;C://Users//Bhaskar//Desktop//WL_Tomcat//TestData//OrderId.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1537214">2000</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreation----V2.0" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;orderDescription&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;orderType&quot;: &quot;LP_Both&quot;,				 &#xd;
  &quot;orderCategory&quot;: &quot;New&quot;,&#xd;
  &quot;dealNumber&quot;: &quot;Perf123&quot;,&#xd;
  &quot;poNumber&quot;: &quot;&quot;,			&#xd;
  &quot;orderSource&quot;: &quot;CRM&quot;,&#xd;
  &quot;referenceNumber&quot;: &quot;&quot;,				   &#xd;
  &quot;evergreenFlag&quot;: &quot;N&quot;,&#xd;
  &quot;effectiveStartDate&quot;: &quot;2020-01-01&quot;,&#xd;
  &quot;effectiveEndDate&quot;: &quot;2020-12-31&quot;,&#xd;
  &quot;businessUnit&quot;: &quot;US1 Business Unit&quot;,&#xd;
  &quot;legalEntity&quot;: &quot;&quot;,			   &#xd;
  &quot;currency&quot;: &quot;US Dollar&quot;,&#xd;
  &quot;priceList&quot;: &quot;SG Price List&quot;,&#xd;
  &quot;billToAccountNumber&quot;: &quot;RAR000075-V12&quot;,&#xd;
  &quot;billToSiteNumber&quot;: &quot;RAR000075&quot;,&#xd;
  &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;billingBatch&quot;: &quot;TEST_001&quot;,&#xd;
  &quot;salesrepName&quot;: &quot;&quot;,&#xd;
  &quot;sellToAccountNumber&quot;: &quot;&quot;,&#xd;
  &quot;sellToSiteNumber&quot;: &quot;&quot;,&#xd;
  &quot;sellToContactNumber&quot;: &quot;&quot;,						   &#xd;
  &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;invoiceAdjMonths&quot;: &quot;0&quot;,&#xd;
  &quot;invoiceAdj&quot;: &quot;1&quot;,&#xd;
  &quot;interfaceAdj&quot;: &quot;3&quot;,&#xd;
  &quot;interfaceAdjMonths&quot;: &quot;4&quot;,&#xd;
  &quot;billingReviewInd&quot;: &quot;&quot;,						&#xd;
  &quot;paymentTerm&quot;: &quot;30 Net&quot;,&#xd;
  &quot;paymentMethod&quot;: &quot;Credit Card&quot;,&#xd;
  &quot;payCurrency&quot;: &quot;US Dollar&quot;,&#xd;
  &quot;payPriceList&quot;: &quot;Regression_Adv_Both&quot;,&#xd;
  &quot;paymentFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;paymentCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;paymentRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;paymentTermName&quot;: &quot;30 Net&quot;,&#xd;
  &quot;partnerName&quot;: &quot;LOAT TEST83&quot;,&#xd;
  &quot;partnerOrigSysRef&quot;: &quot;49&quot;,&#xd;
  &quot;partnerSiteOrigSysRef&quot;: &quot;48704&quot;,&#xd;
  &quot;attributeContext&quot;: &quot;&quot;,&#xd;
  &quot;attribute1V&quot;: &quot;&quot;,&#xd;
  &quot;attribute2V&quot;: &quot;&quot;,&#xd;
  &quot;attribute9V&quot;: &quot;&quot;,&#xd;
  &quot;attribute10V&quot;: &quot;&quot;,&#xd;
  &quot;attribute11V&quot;: &quot;&quot;,&#xd;
  &quot;attribute12V&quot;: &quot;&quot;,&#xd;
  &quot;attribute1N&quot;: &quot;&quot;,&#xd;
  &quot;attribute2N&quot;: &quot;&quot;,&#xd;
  &quot;attribute1D&quot;: &quot;&quot;,&#xd;
  &quot;attribute2D&quot;: &quot;&quot;,&#xd;
  &quot;comments&quot;: &quot;&quot;,&#xd;
  &quot;Activate&quot;: &quot;Y&quot;,&#xd;
  &quot;intent&quot;: &quot;Sell&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2.0/orders</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orderId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">C_orderId</stringProp>
            <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">C_orderId_____NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreation----Amendments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
 &quot;orderDescription&quot;:&quot;${Order_Number}&quot;,&#xd;
 &quot;orderType&quot;: &quot;Test&quot;,&#xd;
 &quot;orderCategory&quot;: &quot;New&quot;,&#xd;
 &quot;dealNumber&quot;: &quot;&quot;,&#xd;
 &quot;poNumber&quot;: &quot;&quot;,&#xd;
 &quot;orderSource&quot;: &quot;CRM&quot;,&#xd;
 &quot;referenceNumber&quot;: &quot;&quot;,&#xd;
 &quot;evergreenFlag&quot;: &quot;N&quot;,&#xd;
 &quot;effectiveStartDate&quot;: &quot;2020-01-01&quot;,&#xd;
 &quot;effectiveEndDate&quot;: &quot;2020-12-31&quot;,&#xd;
 &quot;businessUnit&quot;: &quot;US1 Business Unit&quot;,&#xd;
 &quot;legalEntity&quot;: &quot;&quot;,&#xd;
 &quot;currency&quot;: &quot;US Dollar&quot;,&#xd;
 &quot;priceList&quot;: &quot;SG Price List&quot;,&#xd;
 &quot;billToAccountNumber&quot;: &quot;RAR000075-V12&quot;,&#xd;
 &quot;billToSiteNumber&quot;: &quot;RAR000075&quot;,&#xd;
 &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
 &quot;billingBatch&quot;: &quot;BM_003&quot;,&#xd;
 &quot;salesrepName&quot;: &quot;&quot;,&#xd;
 &quot;sellToAccountNumber&quot;: &quot;&quot;,&#xd;
 &quot;sellToSiteNumber&quot;: &quot;&quot;,&#xd;
 &quot;sellToContactNumber&quot;: &quot;&quot;,&#xd;
 &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
 &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
 &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
 &quot;invoiceAdjMonths&quot;: &quot;1&quot;,&#xd;
 &quot;invoiceAdj&quot;: &quot;2&quot;,&#xd;
 &quot;interfaceAdj&quot;: &quot;3&quot;,&#xd;
 &quot;interfaceAdjMonths&quot;: &quot;4&quot;,&#xd;
 &quot;billingReviewInd&quot;: &quot;&quot;,&#xd;
 &quot;paymentTerm&quot;: &quot;30 Net&quot;,&#xd;
 &quot;paymentMethod&quot;: &quot;Credit Card&quot;,&#xd;
 &quot;payCurrency&quot;: &quot;US Dollar&quot;,&#xd;
 &quot;payPriceList&quot;: &quot;Regression_Adv_Both&quot;,&#xd;
 &quot;paymentFrequency&quot;: &quot;Monthly&quot;,&#xd;
 &quot;paymentCycle&quot;: &quot;Line Start Date&quot;,&#xd;
 &quot;paymentRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
 &quot;paymentTermName&quot;: &quot;30 Net&quot;,&#xd;
 &quot;partnerName&quot;: &quot;LOAT TEST82&quot;,&#xd;
 &quot;partnerOrigSysRef&quot;: &quot;49&quot;,&#xd;
 &quot;partnerSiteOrigSysRef&quot;: &quot;48704&quot;,&#xd;
 &quot;attributeContext&quot;: &quot;&quot;,&#xd;
 &quot;attribute1V&quot;: &quot;&quot;,&#xd;
 &quot;attribute2V&quot;: &quot;&quot;,&#xd;
 &quot;attribute9V&quot;: &quot;&quot;,&#xd;
 &quot;attribute10V&quot;: &quot;&quot;,&#xd;
 &quot;attribute11V&quot;: &quot;&quot;,&#xd;
 &quot;attribute12V&quot;: &quot;&quot;,&#xd;
 &quot;attribute1N&quot;: &quot;&quot;,&#xd;
 &quot;attribute2N&quot;: &quot;&quot;,&#xd;
 &quot;attribute1D&quot;: &quot;&quot;,&#xd;
 &quot;attribute2D&quot;: &quot;&quot;,&#xd;
 &quot;comments&quot;: &quot;&quot;,&#xd;
 &quot;Activate&quot;: &quot;Y&quot;,&#xd;
 &quot;intent&quot;: &quot;Sell&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2.0/orders</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_orderId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">C_orderId</stringProp>
            <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">C_orderId_____NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">10</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Counter</stringProp>
            <stringProp name="CounterConfig.format">0</stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LineCreation--v2.0---Amendments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;orderNumber&quot;:&quot;${Order_Number}&quot;,&#xd;
&quot;itemName&quot;:&quot;Diesel&quot;,&#xd;
&quot;quantity&quot;:&quot;100&quot;,&#xd;
&quot;unitPrice&quot;:&quot;100&quot;,&#xd;
&quot;accountingRule&quot;:&quot;Immediate&quot;,&#xd;
&quot;lineNumber&quot;:&quot;${Counter}&quot;,&#xd;
&quot;lineType&quot;:&quot;Recurring&quot;,&#xd;
&quot;effectiveStartDate&quot;: &quot;2020-01-01&quot;,&#xd;
&quot;effectiveEndDate&quot;: &quot;2020-12-31&quot;,&#xd;
&quot;evergreenFlag&quot;: &quot;N&quot;,&#xd;
&quot;billingFrequency&quot;:&quot;Yearly&quot;,&#xd;
&quot;businessUnit&quot;:&quot;US1 Business Unit&quot;,&#xd;
&quot;invoicingRule&quot;:&quot;Invoice in Advance&quot;,&#xd;
&quot;invoiceAdjMonths&quot;: &quot;5&quot;,&#xd;
&quot;invoiceAdj&quot;: &quot;6&quot;,&#xd;
&quot;interfaceAdj&quot;: &quot;7&quot;,&#xd;
&quot;interfaceAdjMonths&quot;: &quot;8&quot;,&#xd;
&quot;billingCycle&quot;:&quot;1st Day of Month&quot;,&#xd;
&quot;billToAccountNumber&quot;:&quot;RAR000075-V12&quot;,&#xd;
&quot;billToSiteNumber&quot;:&quot;RAR000075&quot;,&#xd;
&quot;billToContactNumber&quot;:&quot;Site-222-V1&quot;,&#xd;
&quot;payCurrency&quot;: &quot;US Dollar&quot;,&#xd;
&quot;payPriceList&quot;: &quot;Regression_Adv_Both&quot;,&#xd;
&quot;paymentFrequency&quot;: &quot;Monthly&quot;,&#xd;
&quot;paymentCycle&quot;: &quot;Line Start Date&quot;,&#xd;
&quot;paymentRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
&quot;paymentType&quot;:&quot;Line Costing&quot;,&#xd;
&quot;priceBasis&quot;:&quot;Unit Cost&quot;,&#xd;
&quot;cost&quot;:&quot;3&quot;,&#xd;
&quot;paymentHeaderId&quot;:&quot;29558&quot;,&#xd;
&quot;paymentTermName&quot;: &quot;30 Net&quot;,&#xd;
&quot;partnerOrigSysRef&quot;: &quot;49&quot;,&#xd;
&quot;partnerSiteOrigSysRef&quot;: &quot;48704&quot;,&#xd;
&quot;effectiveEndDate&quot;: null,&#xd;
&quot;attribute1V&quot;: &quot;01&quot;,&#xd;
&quot;attribute2V&quot;: &quot;ITEM 2&quot;,&#xd;
&quot;attribute3V&quot;: &quot;ITEM 2&quot;,&#xd;
&quot;attribute4V&quot;: &quot;ITEM 2&quot;,&#xd;
&quot;attribute5V&quot;: &quot;ITEM 2&quot;,&#xd;
&quot;attribute6V&quot;: &quot;Test1&quot;,&#xd;
&quot;attribute7V&quot;: &quot;Test2&quot;,&#xd;
&quot;attribute8V&quot;: &quot;Test3&quot;,&#xd;
&quot;attribute9V&quot;: &quot;Test4&quot;,&#xd;
&quot;attribute10V&quot;: &quot;Test5&quot;,&#xd;
&quot;attribute11V&quot;: &quot;Test6&quot;,&#xd;
&quot;attribute12V&quot;: &quot;Test7&quot;,&#xd;
&quot;attribute13V&quot;: &quot;Test8&quot;,&#xd;
&quot;attribute14V&quot;: &quot;Test9&quot;,&#xd;
&quot;attribute15V&quot;: &quot;Test10&quot;,&#xd;
&quot;attribute16V&quot;: &quot;&quot;,&#xd;
&quot;intent&quot;:&quot;Sell&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2.0/orderlines</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">perftest.recvue.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LineId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_LineId</stringProp>
              <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">C_LineId_____NF</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">/*order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);
 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//Lines.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();   */


order = vars.get(&quot;orderNumber&quot;);
order1 = vars.get(&quot;C_LineId&quot;);
f = new FileOutputStream(&quot;E://DataFiles//LineId.txt&quot;, true);
p = new PrintStream(f);
  this.interpreter.setOut(p);
  print(order + &quot;,&quot; + order1);
  f.close();</stringProp>
              <stringProp name="TestPlan.comments">OrderNumber &amp; Line Id at sametime</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 /*FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineId.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();*/
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">order = vars.get(&quot;orderNumber&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineorderNumber.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1537214">2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LineCreation" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;orderNumber&quot;: &quot;${Order_Number}&quot;,&#xd;
  &quot;lineNumber&quot;: &quot;${Counter}&quot;,&#xd;
  &quot;itemName&quot;: &quot;Diesel&quot;,&#xd;
  &quot;businessUnit&quot;:&quot;US1 Business Unit&quot;,&#xd;
  &quot;itemDescription&quot;: &quot;Diesel&quot;,&#xd;
  &quot;uom&quot;: &quot;&quot;,&#xd;
  &quot;quantity&quot;: &quot;10&quot;,&#xd;
  &quot;unitPrice&quot;:&quot;100&quot;,  &#xd;
  &quot;effectiveStartDate&quot;: &quot;2020-01-01&quot;,&#xd;
  &quot;effectiveEndDate&quot;: &quot;2020-12-31&quot;,&#xd;
  &quot;lineType&quot;: &quot;Recurring&quot;,&#xd;
  &quot;billingCycle&quot;: &quot;Line Start Date&quot;,&#xd;
  &quot;billingFrequency&quot;: &quot;Monthly&quot;,&#xd;
  &quot;invoiceAdjMonths&quot;: 2,&#xd;
  &quot;invoiceAdj&quot;: 1,&#xd;
  &quot;billZeroAmount&quot;: 0,&#xd;
  &quot;invoicingRule&quot;: &quot;Invoice in Advance&quot;,&#xd;
  &quot;accountingRule&quot;: &quot;Immediate&quot;,&#xd;
  &quot;billingBatch&quot;: &quot;&quot;,&#xd;
  &quot;billToAccountNumber&quot;: &quot;&quot;,&#xd;
  &quot;billToSiteNumber&quot;: &quot;&quot;,&#xd;
  &quot;billToContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;attribute6V&quot;: &quot;&quot;,&#xd;
  &quot;attribute7V&quot;: &quot;&quot;,&#xd;
  &quot;attribute8V&quot;: &quot;&quot;,&#xd;
  &quot;attribute9V&quot;: &quot;&quot;,&#xd;
  &quot;attribute10V&quot;: &quot;&quot;,&#xd;
  &quot;attribute11V&quot;: &quot;&quot;,&#xd;
  &quot;attribute12V&quot;: &quot;&quot;,&#xd;
  &quot;attribute13V&quot;: &quot;&quot;,&#xd;
  &quot;attribute14V&quot;: &quot;&quot;,&#xd;
  &quot;attribute15V&quot;: &quot;&quot;,&#xd;
  &quot;attribute16V&quot;: &quot;&quot;,&#xd;
  &quot;attribute17V&quot;: &quot;&quot;,&#xd;
  &quot;attribute18V&quot;: &quot;&quot;,&#xd;
  &quot;attribute19V&quot;: &quot;&quot;,&#xd;
  &quot;attribute20V&quot;: &quot;&quot;,&#xd;
  &quot;attribute1D&quot;: &quot;&quot;,&#xd;
  &quot;attribute2D&quot;: &quot;&quot;,&#xd;
  &quot;serviceTypeId&quot;: &quot;&quot;,&#xd;
  &quot;jurisdictionId&quot;: &quot;&quot;,&#xd;
  &quot;exemptionCounty&quot;: &quot;&quot;,&#xd;
  &quot;exemptionFederal&quot;: &quot;&quot;,&#xd;
  &quot;exemptionLocal&quot;: &quot;&quot;,&#xd;
  &quot;exemptionsState&quot;: &quot;&quot;,&#xd;
  &quot;sale&quot;: &quot;&quot;,&#xd;
  &quot;taxCode&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute6V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute7V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute8V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute9V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute10V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute11V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute12V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute13V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute14V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute25V&quot;: &quot;&quot;,&#xd;
  &quot;taxAttribute26V&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/orderLine?access_token=309q9k9ol0db8gpvtg66mt4jsvp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="C_LineId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">C_LineId</stringProp>
              <stringProp name="RegexExtractor.regex">id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">C_LineId_____NF</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">/*order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);
 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//Lines.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();   */


order = vars.get(&quot;orderNumber&quot;);
order1 = vars.get(&quot;C_LineId&quot;);
f = new FileOutputStream(&quot;E://DataFiles//LineId.txt&quot;, true);
p = new PrintStream(f);
  this.interpreter.setOut(p);
  print(order + &quot;,&quot; + order1);
  f.close();</stringProp>
              <stringProp name="TestPlan.comments">OrderNumber &amp; Line Id at sametime</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">order = vars.get(&quot;C_LineId&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 /*FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineId.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();*/
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">order = vars.get(&quot;orderNumber&quot;);
 //token = vars.get(&quot;token_RegEx&quot;);

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 
 FileWriter fstream = new FileWriter(&quot;E://DataFiles//LineorderNumber.txt&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(order + &quot;&quot; );
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1537214">2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderActivate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;orderId&quot;:&quot;${C_orderId}&quot;,&#xd;
&quot;orderNumber&quot;: &quot;${Order_Number}&quot;&#xd;
}&#xd;
&#xd;
&#xd;
/*{&#xd;
&quot;orderId&quot;:&quot;11681482&quot;,&#xd;
&quot;orderNumber&quot;: &quot;Perf_Test_3008_13&quot;&#xd;
&#xd;
{&#xd;
&quot;orderId&quot;:&quot;${C_orderId}&quot;,&#xd;
&quot;orderNumber&quot;: &quot;${Order_Number}&quot;&#xd;
}&#xd;
&#xd;
}*/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">perftest.recvue.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v2.0/orders/${C_orderId}/activate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${C_orderId}</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">testmajor</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
